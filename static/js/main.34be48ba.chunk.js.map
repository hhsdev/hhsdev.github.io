{"version":3,"sources":["theme.jsx","showcase/title.jsx","showcase/tag.jsx","showcase/chipsArray.jsx","showcase/card.jsx","App.js","serviceWorker.js","index.js"],"names":["createMuiTheme","palette","primary","main","Title","className","this","props","title","React","Component","Tag","Chip","avatar","Avatar","src","size","onClick","label","name","useStyles","makeStyles","theme","root","display","justifyContent","flexWrap","margin","spacing","ChipsArray","classes","renderTags","tags","handleClick","event","handler","map","tag","ShowCaseCard","Card","data","img","style","padding","dataArray","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0PAEwBA,YAAe,CACrCC,QAAS,CACPC,QAAS,CAAEC,KAAM,c,8CCQNC,E,iLARX,OACE,yBAAKC,UAAU,+DACZC,KAAKC,MAAMC,W,GAJAC,IAAMC,W,gBCCX,SAASC,EAAIJ,GAC1B,OACE,kBAACK,EAAA,EAAD,CACEC,OAAQ,kBAACC,EAAA,EAAD,CAAQC,IAAKR,EAAMM,SAC3BG,KAAK,QACLC,QAASV,EAAMU,QACfC,MAAOX,EAAMY,O,YCLbC,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,QAAS,OACTC,eAAgB,QAChBC,SAAU,OACV,QAAS,CACPC,OAAQL,EAAMM,QAAQ,UAKb,SAASC,EAAWtB,GACjC,IAAMuB,EAAUV,IAChB,OACE,yBAAKf,UAAWyB,EAAQP,MAAOQ,EAAWxB,EAAMyB,KAAMC,IAI1D,IAAMA,EAAc,SAAAC,KAEdH,EAAa,SAACC,EAAMG,GACxB,OAAOH,EAAKI,KAAI,SAAAC,GACd,OAAO,kBAAC1B,EAAD,CAAKE,OAAQwB,EAAIxB,OAAQM,KAAMkB,EAAIlB,KAAMF,QAASkB,QCN9CG,E,iLAbX,OACE,kBAACC,EAAA,EAAD,CAAMlC,UAAU,qBACd,yBAAKU,IAAKT,KAAKC,MAAMiC,KAAKC,MAC1B,yBAAKC,MAAO,CAAEC,QAAS,QACrB,kBAAC,EAAD,CAAOnC,MAAOF,KAAKC,MAAMiC,KAAKhC,QAC9B,kBAACqB,EAAD,CAAYG,KAAM1B,KAAKC,MAAMiC,KAAKR,a,GAPjBvB,IAAMC,WCC3BkC,EAAY,CAChB,CACEpC,MAAO,0CACPiC,IAAK,+CACLT,KAAM,CACJ,CAAEnB,OAAQ,iBAAkBM,KAAM,cAClC,CAAEN,OAAQ,WAAYM,KAAM,OAC5B,CAAEN,OAAQ,YAAaM,KAAM,UAGjC,CACEX,MAAO,GACPiC,IAAK,+CACLT,KAAM,CACJ,CAAEnB,OAAQ,iBAAkBM,KAAM,cAClC,CAAEN,OAAQ,WAAYM,KAAM,OAC5B,CAAEN,OAAQ,YAAaM,KAAM,WASpB0B,MAJf,WACE,OAAOD,EAAUR,KAAI,SAAAI,GAAI,OAAI,kBAAC,EAAD,CAAcA,KAAMA,QChB/BM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.34be48ba.chunk.js","sourcesContent":["import { createMuiTheme } from '@material-ui/core';\n\nexport const appTheme = createMuiTheme({\n  palette: {\n    primary: { main: '#610f7f' },\n  }\n});\n\n","import React from 'react';\n\nclass Title extends React.Component {\n  render() {\n    return (\n      <div className=\"text-size-2 text-color-primary text-font-bold margin-normal\">\n        {this.props.title}\n      </div>\n    );\n  }\n}\n\nexport default Title;","import React from 'react';\nimport { Avatar, Chip, makeStyles } from '@material-ui/core';\n\nexport default function Tag(props) {\n  return (\n    <Chip\n      avatar={<Avatar src={props.avatar} />}\n      size=\"small\"\n      onClick={props.onClick}\n      label={props.name}/>\n  );\n}\n\n","import React from \"react\";\nimport Tag from './tag.jsx';\nimport { Chip, makeStyles, Avatar } from \"@material-ui/core\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: \"flex\",\n    justifyContent: \"start\",\n    flexWrap: \"wrap\",\n    \"& > *\": {\n      margin: theme.spacing(0.5)\n    }\n  }\n}));\n\nexport default function ChipsArray(props) {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>{renderTags(props.tags, handleClick)}</div>\n  );\n}\n\nconst handleClick = event => {};\n\nconst renderTags = (tags, handler) => {\n  return tags.map(tag => {\n    return <Tag avatar={tag.avatar} name={tag.name} onClick={handler} />\n  });\n};\n","import React from 'react';\nimport { Card } from '@material-ui/core';\nimport Title from './title';\nimport ChipsArray from './chipsArray';\n\nclass ShowCaseCard extends React.Component {\n  render() {\n    return (\n      <Card className=\"showCase margin-2\">\n        <img src={this.props.data.img} />\n        <div style={{ padding: '8px' }}>\n          <Title title={this.props.data.title} />\n          <ChipsArray tags={this.props.data.tags} />\n\n        </div>\n      </Card>\n    );\n  }\n}\n\nexport default ShowCaseCard;","import React from \"react\";\nimport \"./App.css\";\nimport { appTheme } from \"./theme.jsx\";\nimport ShowCaseCard from \"./showcase/card.jsx\";\nimport { AppBar, Toolbar, ThemeProvider } from \"@material-ui/core\";\n\nconst dataArray = [\n  {\n    title: \"TTT: Machine Learning explained with AI\",\n    img: \"https://dummyimage.com/400x150/333333/dddddd\",\n    tags: [\n      { avatar: \"javascript.svg\", name: \"javascript\" },\n      { avatar: \"css3.svg\", name: \"css\" },\n      { avatar: \"html5.svg\", name: \"html\" }\n    ]\n  },\n  {\n    title: \"\",\n    img: \"https://dummyimage.com/400x150/333333/dddddd\",\n    tags: [\n      { avatar: \"javascript.svg\", name: \"javascript\" },\n      { avatar: \"css3.svg\", name: \"css\" },\n      { avatar: \"html5.svg\", name: \"html\" }\n    ]\n  }\n];\n\nfunction App() {\n  return dataArray.map(data => <ShowCaseCard data={data} />);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}